// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using food_delivery.Data;

#nullable disable

namespace fooddelivery.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("food_delivery.Data.Models.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dishCategory")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<double?>("rating")
                        .HasColumnType("float");

                    b.Property<bool>("vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66ebeb1d-e48e-4771-9e2a-8794d37e0630"),
                            description = "firstWok description",
                            dishCategory = 0,
                            name = "firstWok",
                            price = 500.0,
                            vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("f8dc95d6-c4b7-4121-a2b7-e0c7f2099ba9"),
                            description = "secondWok description",
                            dishCategory = 0,
                            name = "secondWok",
                            price = 750.0,
                            vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("adb44e0b-790a-4d70-a5f8-6505cf6fdda3"),
                            description = "thirdWok description",
                            dishCategory = 0,
                            name = "thirdWok",
                            price = 600.0,
                            vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("76010319-021f-4711-8e9b-0b059f4ee5d6"),
                            description = "fourthWok description",
                            dishCategory = 0,
                            name = "fourthWok",
                            price = 300.0,
                            vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("2f7dcc0f-84b1-46ea-8cb5-a226f0a04b7e"),
                            description = "5Wok description",
                            dishCategory = 0,
                            name = "5Wok",
                            price = 1100.0,
                            vegetarian = false
                        },
                        new
                        {
                            Id = new Guid("ce920590-b84d-469e-83a8-c5281addbee5"),
                            description = "6Wok description",
                            dishCategory = 0,
                            name = "6Wok",
                            price = 650.0,
                            vegetarian = true
                        },
                        new
                        {
                            Id = new Guid("79d69072-2292-4472-aa24-b03a16f0aed8"),
                            description = "7Wok description",
                            dishCategory = 0,
                            name = "7Wok",
                            price = 830.0,
                            vegetarian = true
                        });
                });

            modelBuilder.Entity("food_delivery.Data.Models.DishBasket", b =>
                {
                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.HasKey("DishId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DishBaskets");
                });

            modelBuilder.Entity("food_delivery.Data.Models.DishInOrder", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.HasKey("OrderID", "DishID");

                    b.ToTable("DishInOrders");
                });

            modelBuilder.Entity("food_delivery.Data.Models.LoginCredential", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("email");

                    b.ToTable("Credentials");

                    b.HasData(
                        new
                        {
                            email = "user@example.com",
                            password = "string"
                        });
                });

            modelBuilder.Entity("food_delivery.Data.Models.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("food_delivery.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RatingScore")
                        .HasColumnType("float");

                    b.HasKey("UserID", "DishID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("food_delivery.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("birthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("food_delivery.Data.Models.DishBasket", b =>
                {
                    b.HasOne("food_delivery.Data.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("food_delivery.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("food_delivery.Data.Models.Order", b =>
                {
                    b.HasOne("food_delivery.Data.Models.User", "User")
                        .WithMany("orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("food_delivery.Data.Models.User", b =>
                {
                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
